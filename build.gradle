plugins {
    id 'java'
    id 'io.spring.dependency-management' version "1.0.9.RELEASE"
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'pl.allegro.tech.build.axion-release' version '1.10.1'
    id 'com.palantir.docker' version '0.25.0'
    id 'com.palantir.docker-run' version '0.25.0'
    id 'jp.classmethod.aws.cloudformation' version '0.41'
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
}

apply plugin: 'org.sonarqube'

version = scmVersion.version
sourceCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation group: 'com.h2database', name: 'h2', version: '1.3.148'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'coolindguy'
String imageName = "${dockerHubUsernameProperty}/spring-boot-api-example:$version"

sonarqube {
        properties {
                property "sonar.sourceEncoding", "UTF-8"
                property "sonar.login", "a71adb0bde1c1971e5030ba9591bc7e859319643"
                property "sonar.host.url","localhost:9000"
                property "sonar.projectName","jenkins-demo"
                property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/test.exec"

   }
}

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("${buildDir}/reports")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${reportsDir}/jacoco-report")
    }
}

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
}

import com.amazonaws.services.cloudformation.model.Capability

aws {
    region = findProperty('region') ?: 'us-east-1'
}

cloudFormation {
    stackName "$project.name-stack"
    stackParams([
            SubnetID: findProperty('subnetId') ?: '',
            ServiceName: project.name,
            ServiceVersion: project.version,
            DockerHubUsername: dockerHubUsernameProperty
    ])
    templateFile project.file("ecs.yml")
}
